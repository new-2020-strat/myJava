<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.2.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-4.2.xsd ">
    <!--配置spring的ioc，把AccountService配置进来-->
    <bean id="accountService" class="com.aop.aop.xml.service.imple.AccountServiceImple"></bean>
    <!--基于xml文件配置aop步骤
        1.把通知bean交给spring管理
        2.使用aop:config标签表明开始aop的配置
        3.使用aop:aspect标签表明配置切面
            属性：id：是给切面提供一个唯一的标识
                  ref：是指定通知类bean的id
        4.在aop:aspect内部使用相应的标签来配置通知的类型
                现在是让printlog方法在切入点方法执行之前执行，所以是前置通知
                aop:before 表示前置通知
            属性
                method:指定在logger类中哪个方法是前置通知
                pointcut:用于指定切入点表达式，该表达式的含义就是在service中对哪个方法增强
            切入点表达式写法：
                关键字：execution(表达式)
                表达式：访问修饰符 返回值，包名.包名...类名.方法名(参数列表)
                            public void com.aop.service.imple.AccountService.saveAccount()
                        1.访问修饰符可以省略
                        2.返回值可以使用通配符，表示返回任意值
                        3.包名可以使用通配符，表示任意包，但是有几级包就要写几个"*."
                        4.包名还可以使用..表示当前包和子包
                        5.类名和方法名可以使用*实现通配
                        6.参数列表
                            可以直接写数据类型
                                      基本类型直接写名称
                                      引用类型下包名.类名的方式
                                      参数列表可以使用通配符表示任意类型但是必须有参数
                                      可以使用..表示有无参数均可，有参数可以是任意类型
                        全通配写法(对所有方法增强)：     * *..*.*(..)
    -->
    <!--配置切面-->
    <bean id="logger" class="com.aop.aop.xml.utils.Logger"/>
    <!--配置aop-->
    <aop:config>
        <!--切入点表达式-->
        <!--配置切入点表达式，id属性指定表达式的唯一标识，expression指定表达式内容,用于提取相同切点表达式
           此标签写在aop：aspect标签内部，只能当前切面使用
           也可以下载aop:aspect标签外部所有切面使用-->
        <aop:pointcut id="pt1" expression="execution(public void com.aop.aop.xml.service.IAccountService.saveAccount())"/>
        <!--配置切面-->
        <aop:aspect id="logAdvice" ref="logger">
            <!--配置通知类型，并且建立通知方法和切入点方法的关联-->

            <!--前置通知:切入点方法执行之前执行-->
            <aop:before method="beforePrintLog" pointcut-ref="pt1"/>
            <!--后置通知：切入点方法正常执行时执行-->
            <aop:after-returning method="afterReturningPrintLog" pointcut-ref="pt1"/>
            <!--异常通知：切入点方法产生异常之后执行-->
            <aop:after-throwing method="afterThrowingPrintLog" pointcut-ref="pt1"/>
            <!--最终通知：无论切入点是否正常执行最终都会执行-->
            <aop:after method="afterPrintLog" pointcut-ref="pt1"/>

            <!--环绕通知：详细解释看logger类中的aroundPrintLog方法-->
           <aop:around method="aroundPrintLog" pointcut-ref="pt2"/>
           <aop:pointcut id="pt2" expression="execution(public void com.aop.aop.xml.service.IAccountService.updateAccount(int))"/>

        </aop:aspect>
    </aop:config>
</beans>
